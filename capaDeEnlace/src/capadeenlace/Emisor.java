
package capadeenlace;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import gnu.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class Emisor extends javax.swing.JFrame implements Runnable,SerialPortEventListener{

    Integer velocidad;
    Integer bitParada;
    String nombrePuerto;
    Integer paridad;
    Integer longTrama;
    public SerialPort puerto;
    Enumeration listaPuertos;
    public CommPortIdentifier idPuerto;
    int estado;
    capaEnlace capaenlace = new capaEnlace();
    Thread hilo;
    OutputStream salida;
    InputStream entrada;
    static String tramaparamostrar;
   


    /** Creates new form Emisor */
     private void iniciarElementos(){
      jLabel4.setVisible(false);
      comboLong.setVisible(false);
      jLabel6.setVisible(false);
      comboParada.setVisible(false);
      jLabel3.setVisible(false);
      comboParidad.setVisible(false);
      
      
      
        String port;
        System.out.println(CommPortIdentifier.PORT_SERIAL);
        listaPuertos = CommPortIdentifier.getPortIdentifiers();
        System.out.println(listaPuertos.toString());
        while (listaPuertos.hasMoreElements()) {
            idPuerto = (CommPortIdentifier) listaPuertos.nextElement(); //get next port to check
            if (idPuerto.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                    port = idPuerto.getName();
                    comboPuerto.addItem(port);
            }
         }
        
   }
    public Emisor() {

        initComponents();
        iniciarElementos();

    }
    public void serialEvent(SerialPortEvent event){
        switch (event.getEventType()) {
        case SerialPortEvent.BI:
        case SerialPortEvent.OE:
        case SerialPortEvent.FE:
        case SerialPortEvent.PE:
        case SerialPortEvent.CD:
        case SerialPortEvent.CTS:
        case SerialPortEvent.DSR:
        case SerialPortEvent.RI:
        case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
            break;
        case SerialPortEvent.DATA_AVAILABLE:    //analizamos la entrada de datos
       
            StringBuilder readBuffer = new StringBuilder();
            
            int c;
            
            try {
                System.out.println("Leemos los datos del puerto");
                //leemos los datos del puerto
                int i=0;
              
                while (i < 40)  { // las tramas son de 40 caracteres
                    i++;
                    c=entrada.read();
                    readBuffer.append((char)c);
                   
                }
                
                String recibido = readBuffer.toString();
                System.out.println(recibido);
              
                //setDetalleDeRecepcion("Trama recibida: "+recibido);
                
               // pasamos los datos a la capa de enlace
                capaenlace.recibir(this,capaenlace.ReconstruirTrama(recibido));


                //cerramos el flujo de entrada
                entrada.close();
            } catch (IOException e) {
                System.out.println("Error al recibir: "+e.getMessage());

            }

            break;
        }
    }

    public void setDetalleDeEnvio(String texto) {
        String textoPreparado;
        textoPreparado = getDetalleDeEnvio() + '\n';
        this.detalleDeEnvio.setText(textoPreparado + texto);
    }
    
    public String getDetalleDeEnvio() {
        return detalleDeEnvio.getText();
    }


    
    /** This method is called from within the constructor to
     *  the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        configuracion = new javax.swing.JPanel();
        comboPuerto = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboVelocidad = new javax.swing.JComboBox();
        abrir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        comboParidad = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tiempoAcuse = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        comboParada = new javax.swing.JComboBox();
        comboLong = new javax.swing.JComboBox();
        textoEnviar = new javax.swing.JTextField();
        enviar = new javax.swing.JButton();
        jButtonCerrarPuerto = new javax.swing.JButton();
        detalleCom2 = new javax.swing.JScrollPane();
        detalleDeEnvio = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboPuerto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPuertoActionPerformed(evt);
            }
        });

        jLabel1.setText("Puerto:");

        jLabel2.setText("Velocidad:");

        comboVelocidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200", "460800" }));
        comboVelocidad.setSelectedIndex(3);

        abrir.setText("Abrir Puerto");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });

        jLabel3.setText("Pridad:");

        comboParidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Par", "Impar" }));
        comboParidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboParidadActionPerformed(evt);
            }
        });

        jLabel4.setText("Bits por tramas: ");

        jLabel5.setText("Timpo de espera de acuse (ms):");

        tiempoAcuse.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tiempoAcuse.setText("800");
        tiempoAcuse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiempoAcuseActionPerformed(evt);
            }
        });

        jLabel6.setText("Bits de parada:");

        comboParada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2" }));
        comboParada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboParadaActionPerformed(evt);
            }
        });

        comboLong.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "6", "7", "8" }));
        comboLong.setSelectedIndex(3);

        textoEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoEnviarActionPerformed(evt);
            }
        });

        enviar.setText("Enviar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        jButtonCerrarPuerto.setText("Cerrar Puerto");
        jButtonCerrarPuerto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarPuertoActionPerformed(evt);
            }
        });

        detalleDeEnvio.setEditable(false);
        detalleDeEnvio.setBackground(new java.awt.Color(204, 255, 204));
        detalleDeEnvio.setColumns(20);
        detalleDeEnvio.setRows(5);
        detalleCom2.setViewportView(detalleDeEnvio);

        javax.swing.GroupLayout configuracionLayout = new javax.swing.GroupLayout(configuracion);
        configuracion.setLayout(configuracionLayout);
        configuracionLayout.setHorizontalGroup(
            configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configuracionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configuracionLayout.createSequentialGroup()
                        .addComponent(textoEnviar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(enviar)
                        .addGap(8, 8, 8))
                    .addGroup(configuracionLayout.createSequentialGroup()
                        .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(configuracionLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tiempoAcuse, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(configuracionLayout.createSequentialGroup()
                                .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, configuracionLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(abrir))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, configuracionLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboParidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboParada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonCerrarPuerto)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(configuracionLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(detalleCom2))
        );
        configuracionLayout.setVerticalGroup(
            configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configuracionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comboVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(abrir)
                    .addComponent(jButtonCerrarPuerto))
                .addGap(18, 18, 18)
                .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboParidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(comboParada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(26, 26, 26)
                .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tiempoAcuse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enviar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(detalleCom2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Configuración", configuracion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCerrarPuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarPuertoActionPerformed
        try {
            if (idPuerto.isCurrentlyOwned()){
                puerto.close();
                System.out.println("Se cerro el puerto");
                textoEnviar.setText("");
            }
        } catch (Exception ex) {
            throw ex;
        }
    }//GEN-LAST:event_jButtonCerrarPuertoActionPerformed

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        long tiempoDeInicio, tiempoFinal;
        
        Trama tramaArmada = capaenlace.armarTrama('0', textoEnviar.getText());
        
        this.detalleDeEnvio.setText("");
        setDetalleDeEnvio("Texto a enviar: "+textoEnviar.getText());
        setDetalleDeEnvio("---- Armado de trama ---- ");
        setDetalleDeEnvio("Bandera de inicio: "+tramaArmada.getBandera_inicio());
        setDetalleDeEnvio("Orden: "+tramaArmada.getOrden());
        setDetalleDeEnvio("Tipo: "+tramaArmada.getTipo());
        setDetalleDeEnvio("Datos: "+textoEnviar.getText());
        setDetalleDeEnvio("CRC: "+tramaArmada.getCrc());
        setDetalleDeEnvio("Bandera de fin: "+tramaArmada.getBandera_fin());
        setDetalleDeEnvio("Trama armada: "+ tramaArmada.getTramaArmada());
        setDetalleDeEnvio("---- Fin de trama ---- ");
        tiempoDeInicio = System.currentTimeMillis();
        System.out.println("Inicio"+ tiempoDeInicio);
        boolean envio = capaenlace.EnviarTrama(tramaArmada);
        tiempoFinal = System.currentTimeMillis();
        System.out.println("Final"+tiempoFinal);
        long tiempoTotal = tiempoFinal-tiempoDeInicio;
        System.out.println("TT"+ tiempoTotal);
        long tiempo = tiempoTotal*1000;
        
        if(envio){
            setDetalleDeEnvio("---- Trama enviada ---- ");
            
        }else{
            setDetalleDeEnvio("---- Trama no enviada ---- ");
        }
    }//GEN-LAST:event_enviarActionPerformed

    private void textoEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoEnviarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoEnviarActionPerformed

    private void comboParadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboParadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboParadaActionPerformed

    private void comboParidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboParidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboParidadActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        try {
            nombrePuerto=comboPuerto.getSelectedItem().toString();
            idPuerto=CommPortIdentifier.getPortIdentifier(nombrePuerto);

            if(!idPuerto.isCurrentlyOwned()){

                velocidad=Integer.parseInt(comboVelocidad.getSelectedItem().toString());
                
                bitParada=Integer.parseInt(comboParada.getSelectedItem().toString());

                if(comboParidad.getSelectedItem().toString().equals("Par"))
                {paridad=2;
                }else{
                    paridad=1;
                }

                longTrama=Integer.parseInt(comboLong.getSelectedItem().toString());
                puerto = (SerialPort) idPuerto.open("Capa de Enlace", 2000);
                puerto.setSerialPortParams(velocidad, longTrama, bitParada, paridad);
                entrada = puerto.getInputStream();
                puerto.addEventListener(this);
                puerto.notifyOnDataAvailable(true);// para que nos notifique sobre eventos

                System.out.println("Se abrio el puerto: "+puerto.getName());

            }
            else{
                puerto.close();
                System.out.println("Se cerro el puerto: "+puerto.getName());
            }
        }
        catch (Exception ex) {
            System.out.println("Error al abrir el puerto: "+ex.getMessage());
        }
        capaenlace.setSerialPort(puerto);

    }//GEN-LAST:event_abrirActionPerformed

    private void comboPuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPuertoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPuertoActionPerformed

    private void tiempoAcuseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiempoAcuseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tiempoAcuseActionPerformed
  public SerialPort getPuerto(){
    return puerto;
}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Emisor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrir;
    private javax.swing.JComboBox comboLong;
    private javax.swing.JComboBox comboParada;
    private javax.swing.JComboBox comboParidad;
    private javax.swing.JComboBox comboPuerto;
    private javax.swing.JComboBox comboVelocidad;
    private javax.swing.JPanel configuracion;
    private javax.swing.JScrollPane detalleCom2;
    private javax.swing.JTextArea detalleDeEnvio;
    private javax.swing.JButton enviar;
    private javax.swing.JButton jButtonCerrarPuerto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField textoEnviar;
    private javax.swing.JTextField tiempoAcuse;
    // End of variables declaration//GEN-END:variables

    
    public void run() {
      try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {e.printStackTrace();}
    }

}
