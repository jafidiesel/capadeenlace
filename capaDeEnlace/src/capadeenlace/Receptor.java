/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package capadeenlace;

import gnu.io.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
/**
 *
 * @author Chechi
 */
public class Receptor extends javax.swing.JFrame implements Runnable, SerialPortEventListener{

    /**
     * Creates new form Receptor
     */
    public Receptor() {
        initComponents();
        iniciarElementos();
    }

    private void iniciarElementos(){
      
        String port;
        
        System.out.println(CommPortIdentifier.PORT_SERIAL);
        listaPuertos = CommPortIdentifier.getPortIdentifiers();
        System.out.println(listaPuertos.toString());
        while (listaPuertos.hasMoreElements()) {
            idPuerto = (CommPortIdentifier) listaPuertos.nextElement(); //get next port to check
            if (idPuerto.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                    port = idPuerto.getName();
                    comboPuerto.addItem(port);
            }
         }
        
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboPuerto = new javax.swing.JComboBox();
        comboVelocidad = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        textoRecibir = new javax.swing.JTextField();
        abrir = new javax.swing.JButton();
        abrir1 = new javax.swing.JButton();
        jButtonCerrarPuerto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Receptor");

        comboPuerto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPuertoActionPerformed(evt);
            }
        });

        comboVelocidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200", "460800" }));
        comboVelocidad.setSelectedIndex(3);
        comboVelocidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVelocidadActionPerformed(evt);
            }
        });

        jLabel2.setText("Velocidad:");

        jLabel1.setText("Puerto:");

        textoRecibir.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textoRecibir.setAlignmentX(0.0F);
        textoRecibir.setAlignmentY(0.0F);
        textoRecibir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textoRecibir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoRecibirActionPerformed(evt);
            }
        });

        abrir.setText("Abrir Puerto");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });

        abrir1.setText("Abrir Puerto");
        abrir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrir1ActionPerformed(evt);
            }
        });

        jButtonCerrarPuerto.setText("Cerrar Puerto");
        jButtonCerrarPuerto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarPuertoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoRecibir, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(abrir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonCerrarPuerto))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(134, Short.MAX_VALUE)
                    .addComponent(abrir1)
                    .addGap(145, 145, 145)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(abrir)
                    .addComponent(jButtonCerrarPuerto))
                .addGap(11, 11, 11)
                .addComponent(textoRecibir, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(148, Short.MAX_VALUE)
                    .addComponent(abrir1)
                    .addGap(129, 129, 129)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboPuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPuertoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPuertoActionPerformed

    private void textoRecibirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoRecibirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoRecibirActionPerformed
    public void setTextoRecibir(String textoRecibir) {
        this.textoRecibir.setText(textoRecibir);
    }
    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        try {
            nombrePuerto=comboPuerto.getSelectedItem().toString();
            idPuerto=CommPortIdentifier.getPortIdentifier(nombrePuerto);

            if(!idPuerto.isCurrentlyOwned()){

                velocidad=Integer.parseInt(comboVelocidad.getSelectedItem().toString());

                puerto = (SerialPort) idPuerto.open("Capa de Enlace", 2000);
                entrada = puerto.getInputStream();
                puerto.addEventListener(this);
                puerto.notifyOnDataAvailable(true);// para que nos notifique sobre eventos

                hilo = new Thread(this); //corro un hilo para recibir datos
                hilo.start();

                System.out.println("Se abrio el puerto: "+puerto.getName());

            }
            else{
                puerto.close();
                System.out.println("Se cerro el puerto: "+puerto.getName());
            }
        }
        catch (Exception ex) {
            System.out.println("Error al abrir el puerto: "+ex.getMessage());
        }
        capaenlace.setSerialPort(puerto);
    }//GEN-LAST:event_abrirActionPerformed

    public void serialEvent(SerialPortEvent event){
       
        switch (event.getEventType()) {
        case SerialPortEvent.BI:
        case SerialPortEvent.OE:
        case SerialPortEvent.FE:
        case SerialPortEvent.PE:
        case SerialPortEvent.CD:
        case SerialPortEvent.CTS:
        case SerialPortEvent.DSR:
        case SerialPortEvent.RI:
        case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
            break;
        case SerialPortEvent.DATA_AVAILABLE:    //analizamos la entrada de datos

            StringBuilder readBuffer = new StringBuilder();
            int c;
            try {
                System.out.println("Recibiendo.....houston");
                //leemos los datos del puerto
                int i=0;
                while (i < 40)  { // las tramas son de 40 caracteres
                    i++;
                    c=entrada.read();
                    readBuffer.append((char)c);
                   
                }
                
                String recibido = readBuffer.toString();

             System.out.println(recibido);
               
               // pasamos los datos a la capa de enlace
            capaenlace.recibir(this,capaenlace.ReconstruirTrama(recibido));



                //cerramos el flujo de entrada
                
                entrada.close();
            } catch (IOException e) {
                System.out.println("Error al recibir: "+e.getMessage());

            }

            break;
        }
    }
    private void abrir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrir1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_abrir1ActionPerformed

    private void comboVelocidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVelocidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboVelocidadActionPerformed

    private void jButtonCerrarPuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarPuertoActionPerformed
      
            try {
              if (idPuerto.isCurrentlyOwned()){
                puerto.close();
                System.out.println("Se cerro el puerto");
              }
            } catch (Exception ex) {
            //Logger.getLogger(PuertoObj.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
            }
    
    }//GEN-LAST:event_jButtonCerrarPuertoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Receptor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrir;
    private javax.swing.JButton abrir1;
    private javax.swing.JComboBox comboPuerto;
    private javax.swing.JComboBox comboVelocidad;
    private javax.swing.JButton jButtonCerrarPuerto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField textoRecibir;
    // End of variables declaration//GEN-END:variables
    String nombrePuerto;
    Integer velocidad;
    Integer bitParada;
    Integer paridad;
    Integer longTrama;
    public SerialPort puerto;
    Enumeration listaPuertos;
    public CommPortIdentifier idPuerto;
    int estado;
    capaEnlace capaenlace = new capaEnlace();
    Thread hilo;
    OutputStream salida;
    InputStream entrada;
    static String tramaparamostrar;

    @Override
    public void run() {
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {e.printStackTrace();}    }
   

}

